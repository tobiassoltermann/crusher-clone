function Create2DArray(columns, rows) {
   var x = new Array(columns);
   for (var i = 0; i < columns; i++) {
       x[i] = new Array(rows);
   }
   return x;
}

function include(filename)
{
    var head = document.getElementsByTagName('head')[0];

    var script = document.createElement('script');
    script.src = filename;
    script.type = 'text/javascript';

    head.appendChild(script)
}

function getRandomItemKey(enumObj)
{
  return Object.keys(enumObj)[Math.floor(Math.random() * Object.keys(enumObj).length)];
}

function getRandomItemValue(enumObj)
{
  return enumObj[getRandomItemKey(enumObj)];
}

function randomNumber(lowMark, highMark)
{
   return lowMark + parseInt(Math.random() * ( (highMark + 1 ) - lowMark));
}

function PreloadImage() {
  for (i = 0; i < BildListe.length; i++) {
    Bilder[i] = new Image();
    Bilder[i].src = BildListe[i];
  }
}

DRNG = function() {
  this.distribution = {};
  this.distSum = 0;
}
DRNG.prototype.constructor = DRNG;
DRNG.prototype.addNumber = function(value, distribution) {
  if (this.distribution[value] != undefined)
  {
    this.distSum -= this.distribution[value];
  }
  this.distribution[value] = distribution;
  this.distSum += distribution;
}

DRNG.prototype.getRandomNumber = function() {
  var rand = Math.random();
  var ratio = 1.0 / this.distSum;
  var tempDist = 0;

  var keys = Object.keys(this.distribution);
  for (index = 0; index < keys.length; index++)
  {
    var i = keys[index];
    tempDist += this.distribution[i];
    if (rand / ratio <= tempDist) {
      return i;
    }
  }
  return 0;
}
